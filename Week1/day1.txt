
## 1. 프로젝트 관리의 중요성

### 1-1. 프로젝트

---

> **일정한 기간 안에 일정한 목적 달성을 위해 수행하는 업무의 묶음**

> *하나의 프로젝트는 정해진 **기간**, 배정된 **금액**, 투입 **인력** 등 일정한 **제약조건** 하에서 각종 **요구사항을 수행**하는 방식으로 진행*


→ 프로젝트는 소스 코드 구현 뿐만 아니라 기획/설계/테스트/배포 등의 모든 과정 포함

🚨 협업을 위해서는 **공유**가 가장 중요!!! 
ex) 문서 공유, 코드 공유, 담당자, 진행 척도 등
<br><br>
## 2. Readme

### 2-1. Readme의 역할
1. **완성된 프로그램의 설명서**
    - 프로그램 사용 방법
    - 레퍼런스

2. **구현중인 프로젝트의 현황**
    - 구현된 주요 기능
    - 구현 현황
    - 코드가 해결해야 하는 문제

<br>

### 2-2. Readme 작성법 ‘Markdown’
***Markdown*** 

> 일반 사용자들도 웹에서 쉽고 예쁘게 글을 쓸 수 있게 제공하는 기술

<br><br>
## 3. 버전 관리

### 3-1. 버전이란?
→ 버전은 **유의미한 수정**을 의미
<br><br>

### 3-2. 버전 관리 시스템
💡 ***Version Control System***의 기능
- 버전 관리
- 백업 복구
- 협업 (선택)
<br>

#### 1. 로컬 VCS
- 데이터베이스를 사용해서 파일의 변경 정보를 관리하는 시스템
- ex) RCS <br><br>

#### 2. 중앙집중식 VCS
- 서버가 별도로 있고 클라이언트가 중앙 서버에서 파일을 받아 사용하는 방식
- 로컬 VCS보다 관리가 쉽지만, 중앙 서버에서 문제가 발생하면 치명적 결함 발생 
- ex) CVS, Subversion, Perforce <br><br>
  

#### 3. **분산 버전 관리 시스템(DVCS)**
- 저장소를 히스토리와 더불어 전부 복제하는 방식
- 서버에 문제가 생기더라도 이 복제물로 다시 작업을 시작할 수 있음
- 클라이언트 중에서 아무거나 골라도 서버 복원 가능
- 많은 수의 리모트 저장소를 가지기 때문에 다양한 방법으로 협업 가능
- ex) **Git**, Mecurial, Bazaar, Darcs
